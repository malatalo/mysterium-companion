{"version":3,"sources":["MystTable.js","CoolButton.js","ColorDialog.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","overflowX","backgroundColor","maxWidth","minWidth","display","marginTop","tableHead","tableBody","table","size","tableCell","width","padding","MystTable","_ref","rows","showMurderer","classes","colors","purple","yellow","blue","black","red","white","react_default","a","createElement","Paper","className","square","Table","TableHead","TableRow","TableCell","align","TableBody","map","row","key","color","style","opacity","murderer","component","scope","suspect","location","weapon","createMuiTheme","overrides","MuiButton","text","background","borderRadius","border","height","boxShadow","CoolButton","onClick","ThemeProvider","Button","checkboxTheme","checkbox","checkedColor","ColorDialog","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","start","closeColorDialog","setColors","state","cancel","handleChange","event","cols","filter","c","selected","setState","_this2","Dialog","PaperProps","open","onClose","aria-labelledby","aria-describedby","DialogTitle","id","DialogContent","DialogContentText","FormControlLabel","control","Checkbox","checked","onChange","value","label","DialogActions","React","Component","suspectMM","min","max","locationMM","weaponMM","usedNumbers","App","startGame","forEach","randomizeRow","length","Math","floor","random","openColorDialog","colorDialogOpen","toggleShowMurderer","randomNumber","rand","includes","push","sort","b","gameStarted","ColorDialog_ColorDialog","src_CoolButton","Grid","container","spacing","direction","justify","alignItems","item","xs","v","Boolean","window","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d2cb59fa.chunk.js","sourcesContent":["import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    overflowX: \"auto\",\n    backgroundColor: \"rgba(255,255,255,0)\",\n    maxWidth: 1000,\n    minWidth: 0,\n    display: \"inline-block\",\n    marginTop: \"50px\"\n  },\n  tableHead: {\n    backgroundColor: \"rgba(255,255,255,0.5)\"\n  },\n  tableBody: {\n    backgroundColor: \"rgba(255,255,255,0.8)\"\n  },\n  table: {\n    minWidth: 0,\n    size: \"small\"\n  },\n  tableCell: {\n    minWidth: 0,\n    width: \"20%\",\n    padding: \"dense\"\n  }\n}));\n\nexport default function MystTable({ rows, showMurderer }) {\n  const classes = useStyles();\n  const colors = {\n    purple: \"rgba(128, 0, 128, 0.5)\",\n    yellow: \"rgba(255, 255, 0, 0.5)\",\n    blue: \"rgba(0, 0, 255, 0.5)\",\n    black: \"rgba(0, 0, 0, 0.5)\",\n    red: \"rgba(255, 0, 0, 0.5)\",\n    white: \"rgba(255, 255, 255, 0.5)\"\n  };\n\n  return (\n    <Paper className={classes.root} square={true}>\n      <Table className={classes.table}>\n        <TableHead className={classes.tableHead}>\n          <TableRow>\n            <TableCell className={classes.tableCell}>Player</TableCell>\n            <TableCell className={classes.tableCell} align=\"right\">\n              Suspect\n            </TableCell>\n            <TableCell className={classes.tableCell} align=\"center\">\n              Location\n            </TableCell>\n            <TableCell className={classes.tableCell} align=\"left\">\n              Weapon\n            </TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody className={classes.tableBody}>\n          {rows.map(row => (\n            <TableRow\n              key={row.color}\n              style={{ backgroundColor: colors[row.color], opacity: !row.murderer && showMurderer ? 0.2 : 1 }}\n            >\n              <TableCell component=\"th\" scope=\"row\">\n                {row.color}\n              </TableCell>\n              <TableCell align=\"right\">{row.suspect}</TableCell>\n              <TableCell align=\"center\">{row.location}</TableCell>\n              <TableCell align=\"left\">{row.weapon}</TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </Paper>\n  );\n}\n","import React from 'react';\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport { ThemeProvider } from '@material-ui/styles';\nimport Button from '@material-ui/core/Button';\n\nconst theme = createMuiTheme({\n  overrides: {\n    MuiButton: {\n      text: {\n        background: 'linear-gradient(45deg, #001064 30%, #283593 90%)',\n        borderRadius: 3,\n        border: 0,\n        color: 'white',\n        height: 48,\n        padding: '0 20px',\n        boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',\n      },\n    },\n  },\n});\n\nfunction CoolButton({onClick, text}) {\n  return (\n    <ThemeProvider theme={theme}>\n      <Button onClick={onClick}>{text}</Button>\n    </ThemeProvider>\n  );\n}\n\nexport default CoolButton;","import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport { createMuiTheme } from \"@material-ui/core/styles\";\nimport { ThemeProvider } from \"@material-ui/styles\";\n\nconst checkboxTheme = createMuiTheme({\n  checkbox: { checkedColor: \"white\" }\n});\n\nexport default class ColorDialog extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { colors: props.colors };\n  }\n\n  start = () => {\n    this.props.closeColorDialog();\n    this.props.setColors(this.state.colors);\n  };\n\n  cancel = () => {\n    this.props.closeColorDialog();\n  };\n\n  handleChange = color => event => {\n    let cols = this.state.colors;\n    cols.filter(c => c.color === color).map(c => (c.selected = !c.selected));\n    // cols.(c => {\n    //   if (c.color === color) c.selected = !c.selected;\n    // });\n    this.setState({ colors: cols });\n  };\n\n  render() {\n    return (\n      <Dialog\n        PaperProps={{\n          style: {\n            backgroundColor: \"#90A4AE\",\n          }\n        }}\n        open={this.props.open}\n        onClose={this.cancel}\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\"\n      >\n        <DialogTitle id=\"alert-dialog-title\">\n          {\"Which colors are in use?\"}\n        </DialogTitle>\n        <DialogContent>\n          <DialogContentText id=\"alert-dialog-description\">\n            {this.state.colors.map(c => (\n              <span key={c.color}>\n                <FormControlLabel\n                  key={c.color}\n                  control={\n                    <ThemeProvider theme={checkboxTheme}>\n                      <Checkbox\n                        checked={c.selected}\n                        onChange={this.handleChange(c.color)}\n                        value={c.color}\n                        style={{ color: c.color }}\n                      />\n                    </ThemeProvider>\n                  }\n                  label={c.color}\n                />\n                <br />\n              </span>\n            ))}\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button\n            onClick={this.cancel}\n            color=\"primary\"\n            style={{ color: \"white\" }}\n          >\n            Cancel\n          </Button>\n          <Button\n            onClick={this.start}\n            color=\"primary\"\n            style={{ color: \"white\" }}\n          >\n            Start\n          </Button>\n        </DialogActions>\n      </Dialog>\n    );\n  }\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport MystTable from \"./MystTable\";\nimport Grid from \"@material-ui/core/Grid\";\nimport CoolButton from \"./CoolButton\";\nimport ColorDialog from \"./ColorDialog\";\n\nconst suspectMM = { min: 1, max: 18 };\nconst locationMM = { min: 19, max: 37 };\nconst weaponMM = { min: 38, max: 56 };\nlet usedNumbers = [];\n\nexport default class App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      rows: [],\n      showMurderer: false,\n      colorDialogOpen: false,\n      colors: [\n        { color: \"purple\", selected: true },\n        { color: \"yellow\", selected: true },\n        { color: \"blue\", selected: true },\n        { color: \"black\", selected: true },\n        { color: \"red\", selected: true },\n        { color: \"white\", selected: true }\n      ]\n    };\n  }\n\n  startGame = () => {\n    usedNumbers = [];\n    let rows = [];\n    this.setState({ rows: [], showMurderer: false });\n    this.state.colors.forEach(color => {\n      if (color.selected) this.randomizeRow(rows, color.color);\n    });\n    if(rows.length === 0) {\n      this.setState({colors: this.state.colors.map(c=>c.selected=true)})\n      return\n    }\n    rows[Math.floor(Math.random() * rows.length)].murderer = true;\n    this.setState({ rows: rows });\n  };\n\n  openColorDialog = () => {\n    this.setState({ colorDialogOpen: true });\n  };\n\n  closeColorDialog = () => {\n    this.setState({ colorDialogOpen: false });\n  };\n\n  setColors = colors => {\n    this.setState({ colors: colors }, this.startGame());\n  };\n\n  toggleShowMurderer = () => {\n    this.setState({ showMurderer: !this.state.showMurderer });\n  };\n\n  randomNumber = (min, max) => {\n    let rand;\n    do {\n      rand = Math.floor(min + Math.random() * (max - min + 1));\n    } while (usedNumbers.includes(rand));\n    usedNumbers.push(rand);\n    usedNumbers.sort((a, b) => a - b);\n    return rand;\n  };\n\n  randomizeRow = (rows, color) => {\n    const suspect = this.randomNumber(suspectMM.min, suspectMM.max);\n    const location = this.randomNumber(locationMM.min, locationMM.max);\n    const weapon = this.randomNumber(weaponMM.min, weaponMM.max);\n    rows.push({\n      murderer: false,\n      color: color,\n      suspect: suspect,\n      location: location,\n      weapon: weapon\n    });\n  };\n\n  render() {\n    const gameStarted = usedNumbers.length > 0;\n    return (\n      <div className=\"App\">\n        <ColorDialog\n          open={this.state.colorDialogOpen}\n          closeColorDialog={this.closeColorDialog}\n          setColors={this.setColors}\n          colors={this.state.colors}\n        />\n        <div className=\"container\">\n          <CoolButton\n            onClick={this.openColorDialog}\n            text={gameStarted ? \"restart\" : \"start\"}\n          />\n          &nbsp;\n          {gameStarted && (\n            <CoolButton\n              onClick={this.toggleShowMurderer}\n              text={this.state.showMurderer ? \"Hide Murderer\" : \"Show Murderer\"}\n            />\n          )}\n          {gameStarted && (\n            <div>\n              <Grid\n                className={\"gridContainer\"}\n                container\n                spacing={3}\n                direction=\"row\"\n                justify=\"center\"\n                alignItems=\"center\"\n              >\n                <Grid item xs={12} className={\"gridTitle\"}>\n                  Suspects\n                </Grid>\n                {usedNumbers.map(v =>\n                  v < 19 ? (\n                    <Grid key={v} className={\"transparentWhite\"} item xs={1}>\n                      {v}\n                    </Grid>\n                  ) : (\n                    \"\"\n                  )\n                )}\n                <Grid item xs={12} className={\"gridTitle\"}>\n                  Locations\n                </Grid>\n                {usedNumbers.map(v =>\n                  v > 18 && v < 38 ? (\n                    <Grid key={v} className={\"transparentWhite\"} item xs={1}>\n                      {v}\n                    </Grid>\n                  ) : (\n                    \"\"\n                  )\n                )}\n                <Grid item xs={12} className={\"gridTitle\"}>\n                  Weapons\n                </Grid>\n                {usedNumbers.map(v =>\n                  v > 37 ? (\n                    <Grid key={v} className={\"transparentWhite\"} item xs={1}>\n                      {v}\n                    </Grid>\n                  ) : (\n                    \"\"\n                  )\n                )}\n              </Grid>\n              <MystTable\n                rows={this.state.rows}\n                showMurderer={this.state.showMurderer}\n              />\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}